schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
schema {
    query: QueryType
    mutation: MutationType
}

schema Example {
    mutation: MutationType
    query: QueryType
}

type Foo implements Bar {
    one: Type
    two(argument: InputType!): Type
    three(argument: InputType, other: String): Int
    four(argument: String = "string"): String
    five(argument: [String] = ["string", "string"]): String
    six(argument: InputType = {
    key: "value",
    key2: ["value1", "value2"]
}): Type
    seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value", arg2: [Relation]) {
    annotatedField(arg: Type = "default" @onArg): Type @onField
}
